name: "Build"
'on':
  push:
    branches:
      - main
      - ci-sandbox
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - '**'
env:
  qt_version: "6.2.1" # only used by build-macos
  emsdk_version: 2.0.9 # For use in emscripten build
  ccache_basedir: ${{ github.workspace }}
  ccache_dir: "${{ github.workspace }}/.ccache"
  ccache_compilercheck: content
  ccache_compress: 'true'
  ccache_compresslevel: 9
  ccache_maxsize: 200M
  ccache_cmake: -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache

jobs:
    python-ubuntu:
      strategy:
        fail-fast: false
        matrix:
          include:
              - name: "Ubuntu 18.04 / py3.6"
                os: "ubuntu-18.04"
                python-version: "3.6"
              - name: "Ubuntu 18.04 / py3.7"
                os: "ubuntu-18.04"
                python-version: "3.7"
              - name: "Ubuntu 20.04 / py3.8"
                os: "ubuntu-20.04"
                python-version: "3.8"
              - name: "Ubuntu 20.04 / py3.9"
                os: "ubuntu-20.04"
                python-version: "3.9"
              - name: "Ubuntu 20.04 / py3.10"
                os: "ubuntu-20.04"
                python-version: "3.10"

      name: ${{ matrix.name }}
      runs-on: ${{ matrix.os }}
      steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}


      - name: Install Dependencies
        run: |-
          sudo apt-get update
          sudo apt-get install -y \
            ccache  libprotobuf-dev protobuf-compiler \
            python3-setuptools python3-pybind11 

      - name: Install MKL
        run: |-
          wget -qO- "https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB" | sudo apt-key add -
          sudo sh -c "echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list"
          sudo apt-get update -o Dir::Etc::sourcelist="/etc/apt/sources.list.d/intel-mkl.list"
          sudo apt-get install -y --no-install-recommends intel-mkl-64bit-2020.0-088

      - name: Generate ccache_vars for ccache based on machine
        shell: bash
        id: ccache_vars
        run: |-
          echo "::set-output name=hash::$(echo ${{ env.ccache_compilercheck }})"
          echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"

      - name: Cache-op for build-cache through ccache
        uses: actions/cache@v2
        with:
          path: ${{ env.ccache_dir }}
          key: ccache-${{ matrix.name }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
          restore-keys: |-
            ccache-${{ matrix.name }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
            ccache-${{ matrix.name }}-${{ steps.ccache_vars.outputs.hash }}
            ccache-${{ matrix.name }}
      - name: ccache environment setup
        run: |-
          echo "CCACHE_COMPILER_CHECK=${{ env.ccache_compilercheck }}" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ env.ccache_basedir }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=${{ env.ccache_compress }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=${{ env.ccache_compresslevel }}" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=${{ env.ccache_maxsize }}" >> $GITHUB_ENV

      - name: ccache prolog
        run: |-
          ccache -s # Print current cache stats
          ccache -z # Zero cache entry

      - name: Inject local version identifier for non tag builds
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: |-
          echo "PYTHON_LOCAL_VERSION_IDENTIFIER=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: setup.py 
        run: |-
          python3 -m pip install wheel
          BUILD_ARCH=core-avx-i python3 setup.py bdist_wheel --universal

      # We're happy with just compile for the moment, so cache gets some seeding.
      - name: Install onto root python lib
        run: |-
          python3 -m pip install --ignore-installed dist/bergamot-*.whl 

      - name: Fetch models from translateLocally repository.
        run: |-
          python3 -m bergamot download -m en-de-tiny
          python3 -m bergamot download -m de-en-tiny
          python3 -m bergamot ls

      - name: Fetch models from opus repository.
        run: |-
          python3 -m bergamot download -m eng-fin-tiny -r opus
          python3 -m bergamot ls -r opus

      - name: Run the sample python script shipped with module
        run: |-
          python3 -m bergamot translate --model en-de-tiny <<< "Hello World"
          python3 -m bergamot translate --model en-de-tiny de-en-tiny <<< "Hello World"
          python3 -m bergamot translate --model eng-fin-tiny --repository opus <<< "Hello World"

      - name: ccache epilog
        run: 'ccache -s # Print current cache stats'

      - uses: actions/upload-artifact@v2
        with:
            path: ${{github.workspace}}/dist/bergamot-*.whl


    python-macos:
      name: "MacOS 10.15 / py3.10"
      runs-on: "macos-10.15"
      steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install Dependencies
        run: |-
          brew update
          brew install openblas protobuf ccache boost pybind11 
          brew install coreutils findutils libarchive 

      - name: Generate ccache_vars for ccache based on machine
        shell: bash
        id: ccache_vars
        run: |-
          echo "::set-output name=hash::$(echo ${{ env.ccache_compilercheck }})"
          echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"
      - name: Cache-op for build-cache through ccache
        uses: actions/cache@v2
        with:
          path: ${{ env.ccache_dir }}
          key: ccache-${{ job.id }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
          restore-keys: |-
            ccache-${{ job.id }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
            ccache-${{ job.id }}-${{ steps.ccache_vars.outputs.hash }}
            ccache-${{ job.id }}

      - name: ccache environment setup
        run: |-
          echo "CCACHE_COMPILER_CHECK=${{ env.ccache_compilercheck }}" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ env.ccache_basedir }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=${{ env.ccache_compress }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=${{ env.ccache_compresslevel }}" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=${{ env.ccache_maxsize }}" >> $GITHUB_ENV

      - name: ccache prolog
        run: |-
          ccache -s # Print current cache stats
          ccache -z # Zero cache entry

      - name: Apply required patches
        run: |-
            patch -p1 < patches/01-marian-fstream-for-macos.patch

      # Appears to be required per GitHub CI; 
      - name: Set MACOSX DEPLOYMENT TARGET via environment variable
        run: |-
            echo "MACOSX_DEPLOYMENT_TARGET=10.15" >> $GITHUB_ENV

      - name: Inject local version identifier for non tag builds
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: |-
          echo "PYTHON_LOCAL_VERSION_IDENTIFIER=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: setup.py 
        run: |-
          python3 -m pip install --upgrade packaging wheel
          BUILD_ARCH=core-avx-i python3 setup.py bdist_wheel --universal

      # We're happy with just compile for the moment, so cache gets some seeding.
      - name: Install onto root python lib
        run: |-
          python3 -m pip install dist/bergamot-*.whl 

      - name: Fetch models from translateLocally repository.
        run: |-
          python3 -m bergamot download -m en-de-tiny
          python3 -m bergamot download -m de-en-tiny

      - name: Fetch models from opus repository.
        run: |-
          python3 -m bergamot download -m eng-fin-tiny -r opus
          python3 -m bergamot ls -r opus

      - name: Run the sample python script shipped with module
        run: |-
          python3 -m bergamot translate --model en-de-tiny <<< "Hello World"
          python3 -m bergamot translate --model en-de-tiny de-en-tiny <<< "Hello World"
          python3 -m bergamot translate --model eng-fin-tiny --repository opus <<< "Hello World"

      - name: ccache epilog
        run: 'ccache -s # Print current cache stats'

      - uses: actions/upload-artifact@v2
        with:
            path: ${{github.workspace}}/dist/bergamot-*.whl

    build-wasm:
      name: "emscripten"
      runs-on: ubuntu-latest
      steps:

        - name: Checkout
          uses: actions/checkout@v2
          with:
            submodules: recursive

        - name: Set ccache environment for emcc
          run: |
            # We are hardcoding this to mtime instead of env pickup. Rest use content.
            echo "CCACHE_COMPILER_CHECK=mtime" >> $GITHUB_ENV

            echo "CCACHE_BASEDIR=${{ env.ccache_basedir }}" >> $GITHUB_ENV
            echo "CCACHE_COMPRESS=${{ env.ccache_compress }}" >> $GITHUB_ENV
            echo "CCACHE_COMPRESSLEVEL=${{ env.ccache_compresslevel }}" >> $GITHUB_ENV
            echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
            echo "CCACHE_MAXSIZE=${{ env.ccache_maxsize }}" >> $GITHUB_ENV
            # https://emscripten.org/docs/compiling/Building-Projects.html#using-a-compiler-wrapper
            echo "EM_COMPILER_WRAPPER=ccache" >> $GITHUB_ENV
            
        # This need to be run before setup, so ccache build caching doesn't complain.
        - name: Obtain emsdk sources
          run: |
              git clone --depth 1 https://github.com/emscripten-core/emsdk.git

        - name: Cache-op for build-cache through ccache
          uses: actions/cache@v2
          with:
            path: |
                ${{ env.ccache_dir }}
                ${{ github.workspace }}/emsdk/ccache/git-emscripten_64bit/
            key: ccache-${{ github.job }}-${{ env.emsdk_version }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
            restore-keys: |-
              ccache-${{ github.job }}-${{ env.emsdk_version }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
              ccache-${{ github.job }}-${{ env.emsdk_version }}-${{ steps.ccache_vars.outputs.hash }}
              ccache-${{ github.job }}-${{ env.emsdk_version }}

        - name: Setup Emscripten toolchain
          run: |
              (cd emsdk && ./emsdk install ${{ env.emsdk_version }} ccache-git-emscripten-64bit)
              (cd emsdk && ./emsdk activate ${{ env.emsdk_version }} ccache-git-emscripten-64bit)
              # mtime of this file is checked by ccache, we set it to avoid cache misses.
              touch -m -d '1 Jan 2021 12:00' emsdk/.emscripten

              # These needs to be done in the activated shell.
              eval $(./emsdk/emsdk construct_env \
                  | sed 's/export PATH=\(.*\);/echo \1 >> $GITHUB_PATH;/' \
                  | sed 's/export \(.*\);/echo \1 >> $GITHUB_ENV;/' );

              # This looks more permanent than version pinned, so keeping temporarily to avoid failures.
              echo "${{ github.workspace }}/emsdk/ccache/git-emscripten_64bit/bin" >> $GITHUB_PATH

        - name: Generate ccache_vars for ccache based on machine
          shell: bash
          id: ccache_vars
          run: |-
            echo "::set-output name=hash::$(echo ${{ env.ccache_compilercheck }})"
            echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"

        - name: Verify Emscripten setup
          run: |
              emcc --version
              emcmake cmake --version
              emmake make --version

        - name: Configure builds
          run: |
            mkdir -p build-wasm
            cd build-wasm
            emcmake cmake -DCOMPILE_WASM=on ..

        - name: ccache prolog
          run: |-
            ccache -s # Print current cache stats
            ccache -z # Zero cache entry

        - name: Compile
          working-directory: build-wasm
          run: |
            emmake make -j2

        - name: ccache epilog
          run: |
            ccache -s # Print current cache stats

        - name: Instantiate simd wormhole
          working-directory: build-wasm
          run: bash ../wasm/patch-artifacts-enable-wormhole.sh

        - name: Import GEMM library from a separate wasm module
          working-directory: build-wasm
          run: bash ../wasm/patch-artifacts-import-gemm-module.sh

        - name: Upload wasm artifact
          uses: actions/upload-artifact@v2
          with:
            name: bergamot-translator-worker
            if-no-files-found: error
            path: |
                ${{github.workspace}}/build-wasm/bergamot-translator-worker.js
                ${{github.workspace}}/build-wasm/bergamot-translator-worker.wasm
                ${{github.workspace}}/build-wasm/bergamot-translator-worker.js.bak

  # Try to upload a release using https://github.com/marvinpinto/actions/issues/177#issuecomment-917605585 as a model
    release-latest:
      name: Release Latest Build
      runs-on: ubuntu-latest
      needs: [python-ubuntu, python-macos, build-wasm]
      if: github.ref == 'refs/heads/main'
      steps:
       - name: Download artifacts
         uses: actions/download-artifact@v2
  
       - name: Update GitHub prerelease
         uses: marvinpinto/action-automatic-releases@latest
         with:
           repo_token: ${{ secrets.GITHUB_TOKEN }}
           automatic_release_tag: latest
           prerelease: true
           title: "Latest Build"
           files: |
                ${{github.workspace}}/artifact/*.whl
                ${{github.workspace}}/bergamot-translator-worker/bergamot-translator-worker.js
                ${{github.workspace}}/bergamot-translator-worker/bergamot-translator-worker.wasm
  
    release-version:
      name: Release version 
      runs-on: ubuntu-latest
      needs: [python-ubuntu, python-macos, build-wasm]
      permissions:
        contents: "write"
        packages: "write"
        pull-requests: "read"
      if: startsWith(github.ref, 'refs/tags/v')
      steps:
       - name: Download artifacts
         uses: actions/download-artifact@v2
  
       - name: Update GitHub release
         uses: marvinpinto/action-automatic-releases@latest
         with:
           repo_token: ${{ secrets.GITHUB_TOKEN }}
           automatic_release_tag: ${{ github.ref_name }}
           prerelease: false
           title: "${{ github.ref_name }}"
           files: |
              ${{github.workspace}}/artifact/*.whl
              ${{github.workspace}}/bergamot-translator-worker/bergamot-translator-worker.js
              ${{github.workspace}}/bergamot-translator-worker/bergamot-translator-worker.wasm
  
    python-checks:
      name: "formatting and typechecks"
      runs-on: "ubuntu-latest"
      steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install Dependencies
        run: |-
            python3 -m pip install black isort pytype
      - name: "Formatting checks: black, isort"
        run: |
            python3 -m black --check bindings/python/ setup.py doc/conf.py
            python3 -m isort --profile black --diff --check bindings/python setup.py doc/conf.py
      - name: "Static typing checks: pytype"
        run: |-
            python3 -m pytype bindings/python


    docs:
      runs-on: ubuntu-18.04
      needs: [python-ubuntu]
      steps:
        - name: Checkout
          uses: actions/checkout@v2
          with:
            submodules: recursive

        # Runs javascript to extract push events from both tags and branch (only main, due to workflow trigger)
        # converts refs/<>/<name> -> <name>
        # eg:
        #     refs/head/main   -> main
        #     refs/tags/v0.1.0 -> v0.1.0
        #
        - name: Download artifacts
          uses: actions/download-artifact@v2
        - name: Extract tag name
          id: tag
          uses: actions/github-script@0.2.0
          if: ${{ github.event_name == 'push' }}
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const args = context.payload.ref.split("/");
              [refs, category, ...rest] = args;
              return rest.join("/");

        # Patches the BERGAMOT_VERSION file used by sphinx-docs at run time to
        # obtain names like 'main' or 'ci-sandbox' to not confuse with version
        # based documentation built separately.
        - name: Deploy-time patch version 
          run: | 
              echo ${{steps.tag.outputs.result }} > BERGAMOT_VERSION

        - name: Set up Doxygen
          run: sudo apt-get install -y doxygen

        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: 3.7

        - name: Set up dependency cache
          uses: actions/cache@v2
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('doc/requirements.txt') }}
            restore-keys: |
              ${{ runner.os }}-pip-

        - name: Install dependencies
          working-directory: ./doc
          run: |
            python3 -m pip install -r requirements.txt
            python3 -m pip install ${{github.workspace}}/artifact/bergamot-*-cp37*.whl

        - name: Build documentation
          working-directory: ./doc
          run: sphinx-build -b html ./ build/


        - name: Deploy 🚀
          uses: JamesIves/github-pages-deploy-action@4.1.3
          if: ${{ github.event_name == 'push' && github.repository == 'browsermt/bergamot-translator' }}
          with:
            repository-name: 'browsermt/docs' 
            branch: gh-pages # The branch the action should deploy to.
            folder: './doc/build/' # The folder the action should deploy.
            target-folder: '${{ steps.tag.outputs.result }}' 
            ssh-key: ${{ secrets.BERGAMOT_SSH_PRIVATE_KEY }}

        # This artifact contains the HTML output of Sphinx only.
        # With index.html at the root of the produced zip file.
        # For use for maintainers to download the zip and check render of
        # documentation while generated at pull-request. 
        - name: Upload documentation
          uses: actions/upload-artifact@v2
          if: ${{ github.event_name == 'pull_request'}}
          with:
            name: api-docs
            path: ./doc/build/
            if-no-files-found: error

