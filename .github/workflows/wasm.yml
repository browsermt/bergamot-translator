name: WebAssembly 

on:
  push:
    branches: [ main, ci-sandbox ]
  pull_request:
    branches: [ '**' ]

env:
  ccache_basedir: ${{ github.workspace }}
  ccache_dir: "${{ github.workspace }}/.ccache"
  ccache_compilercheck: mtime
  ccache_compress: 'true'
  ccache_compresslevel: 9
  ccache_maxsize: 200M
  ccache_cmake: -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
  emsdk_version: 2.0.9

jobs:
  build-wasm:
    name: "emscripten"
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup Emscripten toolchain
        run: |
            git clone --depth 1 https://github.com/emscripten-core/emsdk.git
            (cd emsdk && ./emsdk install ${{ env.emsdk_version }} ccache-git-emscripten-64bit)
            (cd emsdk && ./emsdk activate ${{ env.emsdk_version }} ccache-git-emscripten-64bit)
            # mtime of this file is checked by ccache, we set it to avoid cache misses.
            touch -m -d '1 Jan 2021 12:00' emsdk/.emscripten
      - name: Setup Paths
        run: |
            # Following two variables are set by emsdk activated otherwise
            echo "_EMCC_CCACHE=1" >> $GITHUB_ENV
            echo "EM_CONFIG=$(realpath emsdk/.emscripten)" >> $GITHUB_ENV

            # Configure GitHub Paths
            echo "${{ github.workspace }}/emsdk" >> $GITHUB_PATH
            echo "${{ github.workspace }}/emsdk/upstream/emscripten" >> $GITHUB_PATH
            echo "${{ github.workspace }}/emsdk/node/14.18.2_64bit/bin" >> $GITHUB_PATH
            echo "${{ github.workspace }}/emsdk/ccache/git-emscripten_64bit/bin" >> $GITHUB_PATH

      - name: Generate ccache_vars for ccache based on machine
        shell: bash
        id: ccache_vars
        run: |-
          echo "::set-output name=hash::$(echo ${{ env.ccache_compilercheck }})"
          echo "::set-output name=timestamp::$(date '+%Y-%m-%dT%H.%M.%S')"

      - name: Verify Emscripten setup
        run: |
            emcc --version
            emcmake cmake --version
            emmake make --version

      - name: Set ccache environment for emcc
        run: |
          echo "CCACHE_COMPILER_CHECK=${{ env.ccache_compilercheck }}" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ env.ccache_basedir }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=${{ env.ccache_compress }}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESSLEVEL=${{ env.ccache_compresslevel }}" >> $GITHUB_ENV
          echo "CCACHE_DIR=${{ env.ccache_dir }}" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=${{ env.ccache_maxsize }}" >> $GITHUB_ENV
          # https://emscripten.org/docs/compiling/Building-Projects.html#using-a-compiler-wrapper
          echo "EM_COMPILER_WRAPPER=ccache" >> $GITHUB_ENV
          

      - name: Cache-op for build-cache through ccache
        uses: actions/cache@v2
        with:
          path: ${{ env.ccache_dir }}
          key: ccache-${{ job.id }}-${{ env.emsdk_version }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}-${{ steps.ccache_vars.outputs.timestamp }}
          restore-keys: |-
            ccache-${{ job.id }}-${{ env.emsdk_version }}-${{ steps.ccache_vars.outputs.hash }}-${{ github.ref }}
            ccache-${{ job.id }}-${{ env.emsdk_version }}-${{ steps.ccache_vars.outputs.hash }}
            ccache-${{ job.id }}-${{ env.emsdk_version }}

      - name: Configure builds
        run: |
          mkdir -p build-wasm
          cd build-wasm
          emcmake cmake -DCOMPILE_WASM=on ..

      - name: ccache prolog
        run: |-
          ccache -s # Print current cache stats
          ccache -z # Zero cache entry

      - name: Compile
        working-directory: build-wasm
        run: |
          emmake make -j2

      - name: ccache epilog
        run: |
          ccache -s # Print current cache stats

      - name: Instantiate simd wormhole
        working-directory: build-wasm
        run: bash ../wasm/patch-artifacts-enable-wormhole.sh

      - name: Import GEMM library from a separate wasm module
        working-directory: build-wasm
        run: bash ../wasm/patch-artifacts-import-gemm-module.sh

      - name: Upload wasm artifact
        uses: actions/upload-artifact@v2
        with:
          name: bergamot-translator-worker
          if-no-files-found: error
          path: |
              ${{github.workspace}}/build-wasm/bergamot-translator-worker.js
              ${{github.workspace}}/build-wasm/bergamot-translator-worker.wasm
              ${{github.workspace}}/build-wasm/bergamot-translator-worker.js.bak

